import "../molecule/molecule-comp.js";

export class Transition {
    constructor(classNames, timeout){
        this.classNames = classNames;

        this.timeout = timeout;

        this.molecule = null;       // plug when *install*

        const handlers = ['inited', 'willEnter', 'entered', 'swap', 'willLeave', 'leaved']
        const events = ['inited', 'willenter', 'entered', 'swap', 'willleave', 'leaved']
        for(let i=0; i<handlers.length; i++){
            const h = handlers[i];
            const eventType = events[i]
            const className = this.getClassName(eventType);  
            const timeout = this.getTimeout(eventType);
            if(className){
                this[h] = function(event){
                    const t = event.target;
                    event.detail.addTask(new Promise(function(resolve, reject){
                        t.classList.add(className);
                        setTimeout(function(){
                            t.classList.remove(className);
                        }, timeout);
                        if(eventType == 'willenter'){
                            resolve();
                        } else {
                            setTimeout(resolve, timeout);
                        }
                    }));
                }             
            }   
        }
    }

    getClassName(eventType){
        if(typeof this.classNames == 'object'){
            return this.classNames[eventType];
        } else {
            return this.classNames + '-' + eventType;   // such as fade-willleave
        }
    }

    getTimeout(eventType){
        if(typeof this.timeout == 'object'){
            return this.timeout[eventType]
        } else {
            return this.timeout;
        }
    }
    
}